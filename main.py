import os

import asyncio

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from aiogram import Dispatcher, Bot, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.storage import FSMContext
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import Throttled

from app import *

load_dotenv()
storage = MemoryStorage()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=bot, storage=storage)


async def on_startup(_):
    await db_start()
    print('Bot started!!!')


class NewOrder(StatesGroup):
    type = State()
    photo = State()
    name = State()
    desc = State()
    price = State()


class MallingState(StatesGroup):
    Choice = State()
    Input = State()
    Input_text = State()
    Input_photo = State()
    Input_photo_2 = State()


def rate_limit(limit: int, key=None):
    def decorator(func):
        setattr(func, 'throttling_rate_limit', limit)
        if key:
            setattr(func, 'throttling_key', key)
        return func

    return decorator


class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit: int = 5, key_prefix='antiflood_'):
        BaseMiddleware.__init__(self)
        self.rate_limit = limit
        self.prefix = key_prefix

    async def on_process_message(self, message: types.Message, data: dict):
        handler = current_handler.get()
        dsp = Dispatcher.get_current()
        if handler:
            limit = getattr(handler, 'throttling_key_limit', self.rate_limit)
            key = getattr(handler, 'throttling_key', f'{self.prefix}_{handler.__name__}')
        else:
            limit = self.rate_limit
            key = f'{self.prefix}_message'
        try:
            await dsp.throttle(key, rate=limit)

        except Throttled as _t:
            await self.msg_throttle(message, _t)
            raise CancelHandler

    async def msg_throttle(self, message: types.Message, throttle: Throttled):
        delta = throttle.rate - throttle.delta
        if throttle.exceeded_count <= 2:
            await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥')
        await asyncio.sleep(delta)


@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await cmd_start_db(message.from_user.id)
    await bot.send_photo(chat_id=message.from_user.id,
                         caption=f'{message.from_user.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!üëã\n'
                                 f'–§–∞–±—Ä–∏–∫–∞ <b>StilKom</b> —Å 2008 –≥–æ–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –∏ —Ä–µ–º–æ–Ω—Ç–æ–º –º—è–≥–∫–æ–π '
                                 f'–º–µ–±–µ–ª–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ'
                                 f' –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–ø—ã—Ç–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤–æ–ø–ª–æ—Ç–∏—Ç —Å–º–µ–ª—ã–µ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–µ –∏–¥–µ–∏ —Å '
                                 f'—É—á–µ—Ç–æ–º –≤—Å–µ—Ö'
                                 f' –ø–æ–∂–µ–ª–∞–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ –ø–æ–¥–∞—Ä–∏—Ç –∏–∑–¥–µ–ª–∏—è–º –≤—Ç–æ—Ä—É—é –∂–∏–∑–Ω—å –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏.',
                         reply_markup=kb_main_menu(), parse_mode='html',
                         photo='AgACAgIAAxkBAAMCZT7BsVrxSDJNYRaYD7dknIMjKdAAAqrQMRvcM_hJpTcSywcp2csBAAMCAAN5AAMwBA')
    if message.from_user.id == int(os.getenv('ADMIN')):
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüîß', reply_markup=kb_main_menu_adm())


@dp.message_handler(Text(equals='üì¢–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state=MallingState.Input)
async def main_menu_cmd_2(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—éüì¢', reply_markup=kb_main_menu_adm())


@dp.message_handler(Text(equals='üì¢–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state=NewOrder.type)
async def main_menu_cmd_2(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—éüì¢', reply_markup=kb_main_menu_adm())


@dp.message_handler(Text(equals='üì¢–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def main_menu_cmd(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN')):
        await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—éüì¢', reply_markup=kb_main_menu_adm())

    else:
        await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—éüì¢', reply_markup=kb_main_menu())


@dp.message_handler(Text(equals='üë•–ö–æ–Ω—Ç–∞–∫—Ç—ã'))
async def contact_cmd(message: types.Message):
    await message.answer(text='<b>üè¢ –ê–¥—Ä–µ—Å–∞</b>:\n—Å. –ü–µ—Ç—Ä–æ–≤—Å–∫–æ–µ, —É–ª. –ó–∞–≤–æ–¥—Å–∫–∞—è, –¥. 1–ê\n'
                              '–≥. –ú–æ—Å–∫–≤–∞ –ë–æ—Ä–æ–≤—Å–∫–æ–µ —à., –¥. 51 (–º. –ù–æ–≤–æ–ø–µ—Ä–µ–¥–µ–ª–∫–∏–Ω–æ)\n'
                              '–≥. –ú–æ—Å–∫–≤–∞ –†—è–∑–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 86/1 —Å—Ç3\n\n<b>üìû –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:\n'
                              '+7 (925) 087-47-08\n+7 (495) 135-92-55\n\n<b>üì´ –ü–æ—á—Ç–∞</b>:\n'
                              'info@stilkom.ru\n\n<b>‚è∞ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã</b>:\n–ü–Ω-–ü—Ç 09:00-18:00\n'
                              '–°–±, –í—Å ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π', parse_mode='html')


@dp.message_handler(Text(equals='üîß–£—Å–ª—É–≥–∏'))
async def job_cmd(message: types.Message):
    await message.answer(
        'üìå –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –º–µ–±–µ–ª–∏ –ø–æ –≤–∞—à–µ–º—É –¥–∏–∑–∞–π–Ω—É(–ö—Ä–æ–≤–∞—Ç–∏, –¥–∏–≤–∞–Ω—ã, –∫—Ä–µ—Å–ª–∞, —Å—Ç—É–ª—å—è –∏ –¥—Ä.)\n\n'
        'üìå –†–µ–º–æ–Ω—Ç, –ø–µ—Ä–µ—Ç—è–∂–∫–∞, —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è –º–µ–±–µ–ª–∏(–ö—Ä–æ–≤–∞—Ç–∏, –¥–∏–≤–∞–Ω—ã, –∫—Ä–µ—Å–ª–∞, —Å—Ç—É–ª—å—è –∏ –¥—Ä.)\n\n'
        'üìå –†–µ–º–æ–Ω—Ç –∫—É—Ö–æ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏\n\n'
        'üìå –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π\n\n'
        'üìå –†–µ–º–æ–Ω—Ç –∫–æ–∂–∞–Ω–æ–π –º–µ–±–µ–ª–∏\n\n'
        'üìå –†–µ–º–æ–Ω—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –º–µ–±–µ–ª–∏\n\n'
        'üìå –†–µ–º–æ–Ω—Ç –æ—Ñ–∏—Å–Ω–æ–π –º–µ–±–µ–ª–∏\n\n'
        'üìå –ú–µ–±–µ–ª—å –æ–ø—Ç–æ–º\n\n'
        '<b>–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É</b>:\n'
        'https://stilkom.ru/uslugi/', parse_mode='html')


@dp.message_handler(Text(equals='‚öôÔ∏è–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'))
async def admin_cmd(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN')):
        await message.answer('–í—ã –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏‚öôÔ∏è', reply_markup=kb_adm_panel())
    else:
        pass


@dp.message_handler(Text(equals='‚úâÔ∏è–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'))
async def malling_create(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN')):
        await MallingState.Choice.set()
        await message.answer('–í—ã–±–∏—Ä–µ—Ç–µ –≤–∏–¥ —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ikb_malling_check())
        await MallingState.Input.set()


@dp.callback_query_handler(cb_2.filter(action='text'), state=MallingState.Input)
async def text_malling(callback: types.CallbackQuery):
    await callback.answer('–í–∏–¥ –≤—ã–±—Ä–∞–Ω')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=cancel())
    await MallingState.Input_text.set()


@dp.message_handler(state=MallingState.Input_text)
async def malling_cmd_text(message: types.Message, state: FSMContext):
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    users = cur.execute("SELECT tg_id FROM accounts").fetchall()
    db.close()
    for user in users:
        await bot.send_message(chat_id=user[0], text=message.text)
    await message.answer('–†–∞—Å—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ', reply_markup=kb_adm_panel())
    await state.finish()


@dp.callback_query_handler(cb_2.filter(action='photo'), state=MallingState.Input)
async def photo_malling(callback: types.CallbackQuery):
    await callback.answer('–í–∏–¥ –≤—ã–±—Ä–∞–Ω')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',
                                  reply_markup=cancel())
    await MallingState.Input_photo.set()


@dp.message_handler(state=MallingState.Input_photo)
async def save_caption(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(text=answer)
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=cancel())
    await MallingState.Input_photo_2.set()


@dp.message_handler(lambda message: not message.photo, state=MallingState.Input_photo_2)
async def check_photo(message: types.Message):
    await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è‚ùå!!!')


@dp.message_handler(state=MallingState.Input_photo_2, content_types=['photo'])
async def save_photo(message: types.Message, state: FSMContext):
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    users = cur.execute("SELECT tg_id FROM accounts").fetchall()
    db.close()
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    data = await state.get_data()
    text = data.get('text')
    photo = data.get('photo')
    for user in users:
        await bot.send_photo(chat_id=user[0], photo=photo, caption=text)
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ', reply_markup=kb_adm_panel())
    await state.finish()


@dp.message_handler(Text(equals='‚ùå–û—Ç–º–µ–Ω–∞'), state='*')
async def cancel_cmd(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ‚ùå', reply_markup=kb_adm_panel())


@dp.message_handler(Text(equals='‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'))
async def add_order(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN')):
        await NewOrder.type.set()
        await message.answer('1)–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞', reply_markup=ikb_catalog())
    else:
        pass


@dp.callback_query_handler(state=NewOrder.type)
async def add_type(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = callback.data
    await callback.answer('–¢–∏–ø —Ç–æ–≤–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω')
    await callback.message.answer('2)–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=cancel())
    await NewOrder.next()


@dp.message_handler(lambda message: not message.photo, state=NewOrder.photo)
async def check_photo(message: types.Message):
    await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è‚ùå!!!')


@dp.message_handler(content_types=['photo'], state=NewOrder.photo)
async def add_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await message.answer('3)–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await NewOrder.next()


@dp.message_handler(state=NewOrder.name)
async def add_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer('4)–ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await NewOrder.next()


@dp.message_handler(state=NewOrder.desc)
async def add_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text
    await message.answer('5)–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
    await NewOrder.next()


@dp.message_handler(state=NewOrder.price)
async def add_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    await add_item(state)
    await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω‚úÖ', reply_markup=kb_adm_panel())
    await state.finish()


@dp.message_handler(Text(equals='‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'))
async def delete_cmd(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN')):
        await message.answer('–í—ã–±–∏—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=ikb_catalog_delete())


@dp.callback_query_handler(cb_2.filter(action='ug1'))
async def delete2_cmd(callback: types.CallbackQuery):
    await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    for ret in cur.execute("SELECT * FROM items WHERE type == 'ikb:ug'").fetchall():
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=ret[0],
                             caption=f'{ret[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{ret[2]}\n<b>–¶–µ–Ω–∞:</b>\n<em>{ret[3]}</em>\n'
                                     f'<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</b>: '
                                     f'https://stilkom.ru/myagkaya-mebel-ot-proizvoditelya/divan-ot-proizvoditelya/',
                             parse_mode='html')
        ikb = InlineKeyboardMarkup(row_width=2)
        ikb.add(InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}'))
        await bot.send_message(chat_id=callback.from_user.id, text='^^^^^^', reply_markup=ikb)


@dp.callback_query_handler(cb_2.filter(action='pr1'))
async def delete2_cmd(callback: types.CallbackQuery):
    await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    for ret in cur.execute("SELECT * FROM items WHERE type == 'ikb:pr'").fetchall():
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=ret[0],
                             caption=f'{ret[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{ret[2]}\n<b>–¶–µ–Ω–∞:</b>\n<em>{ret[3]}</em>\n'
                                     f'<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</b>: '
                                     f'https://stilkom.ru/myagkaya-mebel-ot-proizvoditelya/divan-ot-proizvoditelya/',
                             parse_mode='html')
        ikb = InlineKeyboardMarkup(row_width=2)
        ikb.add(InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}'))
        await bot.send_message(chat_id=callback.from_user.id, text='^^^^^^', reply_markup=ikb)


@dp.callback_query_handler(cb_2.filter(action='evro1'))
async def delete2_cmd(callback: types.CallbackQuery):
    await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    for ret in cur.execute("SELECT * FROM items WHERE type == 'ikb:evro'").fetchall():
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=ret[0],
                             caption=f'{ret[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{ret[2]}\n<b>–¶–µ–Ω–∞:</b>\n<em>{ret[3]}</em>\n'
                                     f'<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</b>: '
                                     f'https://stilkom.ru/myagkaya-mebel-ot-proizvoditelya/divan-ot-proizvoditelya/',
                             parse_mode='html')
        ikb = InlineKeyboardMarkup(row_width=2)
        ikb.add(InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}'))
        await bot.send_message(chat_id=callback.from_user.id, text='^^^^^^', reply_markup=ikb)


@dp.callback_query_handler(cb_2.filter(action='pan1'))
async def delete2_cmd(callback: types.CallbackQuery):
    await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    for ret in cur.execute("SELECT * FROM items WHERE type == 'ikb:pan'").fetchall():
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=ret[0],
                             caption=f'{ret[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{ret[2]}\n<b>–¶–µ–Ω–∞:</b>\n<em>{ret[3]}</em>\n'
                                     f'<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</b>: '
                                     f'https://stilkom.ru/myagkaya-mebel-ot-proizvoditelya/divan-ot-proizvoditelya/',
                             parse_mode='html')
        ikb = InlineKeyboardMarkup(row_width=2)
        ikb.add(InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}'))
        await bot.send_message(chat_id=callback.from_user.id, text='^^^^^^', reply_markup=ikb)


@dp.callback_query_handler(cb_2.filter(action='akk1'))
async def delete2_cmd(callback: types.CallbackQuery):
    await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    for ret in cur.execute("SELECT * FROM items WHERE type == 'ikb:akk'").fetchall():
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=ret[0],
                             caption=f'{ret[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{ret[2]}\n<b>–¶–µ–Ω–∞:</b>\n<em>{ret[3]}</em>\n'
                                     f'<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</b>: '
                                     f'https://stilkom.ru/myagkaya-mebel-ot-proizvoditelya/divan-ot-proizvoditelya/',
                             parse_mode='html')
        ikb = InlineKeyboardMarkup(row_width=2)
        ikb.add(InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}'))
        await bot.send_message(chat_id=callback.from_user.id, text='^^^^^^', reply_markup=ikb)


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def delete3_cmd(callback: types.CallbackQuery):
    await db_delete(callback.data.replace('del ', ''))
    await callback.answer(text=f'{callback.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω–∞', show_alert=True)


@dp.message_handler(Text(equals='üõí–ö–∞—Ç–∞–ª–æ–≥ –¥–∏–≤–∞–Ω–æ–≤'))
async def catalog_cmd(message: types.Message):
    await message.answer('–í—ã–±–∏—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=ikb_catalog())


@dp.callback_query_handler(cb.filter(action='ug'))
async def catalog_sofa(callback: types.CallbackQuery):
    await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    for ret in cur.execute("SELECT * FROM items WHERE type == 'ikb:ug'").fetchall():
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=ret[0],
                             caption=f'{ret[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{ret[2]}\n<b>–¶–µ–Ω–∞:</b>\n<em>{ret[3]}</em>\n'
                                     f'<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</b>: '
                                     f'https://stilkom.ru/myagkaya-mebel-ot-proizvoditelya/divan-ot-proizvoditelya/',
                             parse_mode='html')
    db.close()


@dp.callback_query_handler(cb.filter(action='pr'))
async def catalog_sofa(callback: types.CallbackQuery):
    await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    for ret in cur.execute("SELECT * FROM items WHERE type == 'ikb:pr'").fetchall():
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=ret[0],
                             caption=f'{ret[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{ret[2]}\n<b>–¶–µ–Ω–∞:</b>\n<em>{ret[3]}</em>\n'
                                     f'<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</b>: '
                                     f'https://stilkom.ru/myagkaya-mebel-ot-proizvoditelya/divan-ot-proizvoditelya/',
                             parse_mode='html')
    db.close()


@dp.callback_query_handler(cb.filter(action='evro'))
async def catalog_sofa(callback: types.CallbackQuery):
    await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    for ret in cur.execute("SELECT * FROM items WHERE type == 'ikb:evro'").fetchall():
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=ret[0],
                             caption=f'{ret[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{ret[2]}\n<b>–¶–µ–Ω–∞:</b>\n<em>{ret[3]}</em>\n'
                                     f'<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</b>: '
                                     f'https://stilkom.ru/myagkaya-mebel-ot-proizvoditelya/divan-ot-proizvoditelya/',
                             parse_mode='html')
    db.close()


@dp.callback_query_handler(cb.filter(action='pan'))
async def catalog_sofa(callback: types.CallbackQuery):
    await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    for ret in cur.execute("SELECT * FROM items WHERE type == 'ikb:pan'").fetchall():
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=ret[0],
                             caption=f'{ret[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{ret[2]}\n<b>–¶–µ–Ω–∞:</b>\n<em>{ret[3]}</em>\n'
                                     f'<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</b>: '
                                     f'https://stilkom.ru/myagkaya-mebel-ot-proizvoditelya/divan-ot-proizvoditelya/',
                             parse_mode='html')
    db.close()


@dp.callback_query_handler(cb.filter(action='akk'))
async def catalog_sofa(callback: types.CallbackQuery):
    await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    db = sq.connect('tg_shop.db')
    cur = db.cursor()
    for ret in cur.execute("SELECT * FROM items WHERE type == 'ikb:akk'").fetchall():
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=ret[0],
                             caption=f'{ret[1]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{ret[2]}\n<b>–¶–µ–Ω–∞:</b>\n<em>{ret[3]}</em>\n'
                                     f'<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç</b>: '
                                     f'https://stilkom.ru/myagkaya-mebel-ot-proizvoditelya/divan-ot-proizvoditelya/',
                             parse_mode='html')
    db.close()


if __name__ == '__main__':
    dp.middleware.setup(ThrottlingMiddleware())
    executor.start_polling(dispatcher=dp, on_startup=on_startup, skip_updates=True)
